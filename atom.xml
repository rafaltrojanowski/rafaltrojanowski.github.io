<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rafal Trojanowski - Ruby on Rails Developer</title>
  
  <subtitle>Random tech notes from Freelance Ruby on Rails Developer</subtitle>
  <link href="http://rafaltrojanowski.github.io/atom.xml" rel="self"/>
  
  <link href="http://rafaltrojanowski.github.io/"/>
  <updated>2024-03-28T19:08:52.918Z</updated>
  <id>http://rafaltrojanowski.github.io/</id>
  
  <author>
    <name>Rafał Trojanowski</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to build Nested Form ala Rails with Phoenix Liveview</title>
    <link href="http://rafaltrojanowski.github.io/2021/01/09/how-to-build-nested-form-ala-rails-with-phoenix-liveview/"/>
    <id>http://rafaltrojanowski.github.io/2021/01/09/how-to-build-nested-form-ala-rails-with-phoenix-liveview/</id>
    <published>2021-01-09T13:41:51.000Z</published>
    <updated>2024-03-28T19:08:52.918Z</updated>
    
    <content type="html"><![CDATA[<p>Every pricing plan needs to list of features. To allow users to type all related data in one form we want to implement something that is called “Nested form” and is well known from other Web Frameworks - Ruby on Rails, thanks to a dedicated gem that handles it out of the box. Some community members considered this as an anti-pattern, however from<br>the user experience perspective it saves a lot of time when adding data to the tables that have one-to-many relationships.</p><p>There are a few ways to achieve it with Elixir, after analyzing all of them the most efficient and the most Phonix-way in my opinion is the one that uses LiveView, one of the flag features of Web Framework that is getting more traction.</p><p>To achieve my goal with Phoenix it took me a bit of time, so I decided to describe the process of adding this feature to my SaaS app.</p><h2>Setup of Phoenix LiveView</h2><p>Surprisingly to me, not every Phoenix app is ready to play with LiveView. You can add a flag during project generation or setup it manually. I used the second approach and the whole process is not complicated. You can find an installation guide here: <a href="https://hexdocs.pm/phoenix_live_view/installation.html" target="_blank" rel="noopener">https://hexdocs.pm/phoenix_live_view/installation.html</a></p><p>After setting up a live view let’s add our features to the schema of a pricing plan:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">defmodule</span> <span class="title">Kickstart.Accounts.PricingPlan</span></span> <span class="keyword">do</span></span><br><span class="line">    schema <span class="string">"pricing_plans"</span> <span class="keyword">do</span></span><br><span class="line">      field <span class="symbol">:description</span>, <span class="symbol">:string</span></span><br><span class="line">      field <span class="symbol">:name</span>, <span class="symbol">:string</span></span><br><span class="line">      field <span class="symbol">:position</span>, <span class="symbol">:integer</span></span><br><span class="line">      field <span class="symbol">:is_visible</span>, <span class="symbol">:boolean</span></span><br><span class="line"></span><br><span class="line">+     embeds_many <span class="symbol">:features</span>, Feature, <span class="symbol">on_replace:</span> <span class="symbol">:delete</span> <span class="comment"># add this line</span></span><br><span class="line">      timestamps()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Modify pricing plan changeset in the same file, by adding cast_embed function that does the job:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">changeset</span></span>(pricing_plan, attrs) <span class="keyword">do</span></span><br><span class="line">    pricing_plan</span><br><span class="line">    |&gt; cast(attrs, [<span class="symbol">:name</span>, <span class="symbol">:price</span>, <span class="symbol">:period</span>, <span class="symbol">:description</span>, <span class="symbol">:position</span>, <span class="symbol">:is_visible</span>])</span><br><span class="line">    |&gt; validate_required([<span class="symbol">:name</span>, <span class="symbol">:price</span>, <span class="symbol">:period</span>, <span class="symbol">:description</span>, <span class="symbol">:position</span>])</span><br><span class="line">    |&gt; validate_length(<span class="symbol">:description</span>, <span class="symbol">min:</span> <span class="number">5</span>)</span><br><span class="line">    |&gt; validate_number(<span class="symbol">:price</span>, <span class="symbol">greater_than:</span> 0)</span><br><span class="line">+   |&gt; cast_embed(<span class="symbol">:features</span>, <span class="symbol">with:</span> &amp;Kickstart.Accounts.Feature.changeset/<span class="number">2</span>, <span class="symbol">required:</span> <span class="keyword">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>and add Feature model:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Kickstart.Accounts.Feature</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> Ecto.Schema</span><br><span class="line">  <span class="keyword">import</span> Ecto.Changeset</span><br><span class="line"></span><br><span class="line">  embedded_schema <span class="keyword">do</span></span><br><span class="line">    field <span class="symbol">:title</span></span><br><span class="line">    field <span class="symbol">:temp_id</span>, <span class="symbol">:string</span>, <span class="symbol">virtual:</span> <span class="keyword">true</span></span><br><span class="line">    field <span class="symbol">:delete</span>, <span class="symbol">:boolean</span>, <span class="symbol">virtual:</span> <span class="keyword">true</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">changeset</span></span>(feature, attrs) <span class="keyword">do</span></span><br><span class="line">    feature</span><br><span class="line">    |&gt; Map.put(<span class="symbol">:temp_id</span>, (feature.temp_id || attrs[<span class="string">"temp_id"</span>])) <span class="comment"># So its persisted</span></span><br><span class="line">    |&gt; cast(attrs, [<span class="symbol">:title</span>, <span class="symbol">:delete</span>]) <span class="comment"># Add delete here</span></span><br><span class="line">    |&gt; validate_required([<span class="symbol">:title</span>])</span><br><span class="line">    |&gt; maybe_mark_for_deletion()</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">maybe_mark_for_deletion</span></span>(%&#123;<span class="symbol">data:</span> %&#123;<span class="symbol">id:</span> <span class="keyword">nil</span>&#125;&#125; = changeset), <span class="symbol">do:</span> changeset</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">maybe_mark_for_deletion</span></span>(changeset) <span class="keyword">do</span></span><br><span class="line">    if get_change(changeset, <span class="symbol">:delete</span>) <span class="keyword">do</span></span><br><span class="line">      %&#123;changeset | <span class="symbol">action:</span> <span class="symbol">:delete</span>&#125;</span><br><span class="line">    else</span><br><span class="line">      changeset</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>We also need to add a small module that will be used later in our live form:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Kickstart.PricingPlans</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">alias</span> Kickstart.Accounts.Feature</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change_feature</span></span>(%Feature&#123;&#125; = feature) <span class="keyword">do</span></span><br><span class="line">    Feature.changeset(feature, %&#123;&#125;)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>And finally, implement our live form:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">KickstartWeb.PricingPlanFormLive</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> Phoenix.LiveView</span><br><span class="line"></span><br><span class="line">  <span class="keyword">alias</span> Kickstart.Accounts</span><br><span class="line">  <span class="keyword">alias</span> Kickstart.PricingPlans</span><br><span class="line">  <span class="keyword">alias</span> Kickstart.Accounts.PricingPlan</span><br><span class="line">  <span class="keyword">alias</span> Kickstart.Accounts.Feature</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">mount</span></span>(_params, %&#123;<span class="string">"action"</span> =&gt; action, <span class="string">"csrf_token"</span> =&gt; csrf_token&#125; = session, socket) <span class="keyword">do</span></span><br><span class="line">    pricing_plan = get_pricing_plan(session)</span><br><span class="line">    changeset =</span><br><span class="line">      Accounts.change_pricing_plan(pricing_plan)</span><br><span class="line">      |&gt; Ecto.Changeset.put_embed(<span class="symbol">:features</span>, pricing_plan.features)</span><br><span class="line"></span><br><span class="line">    assigns = [</span><br><span class="line">      <span class="symbol">conn:</span> socket,</span><br><span class="line">      <span class="symbol">action:</span> action,</span><br><span class="line">      <span class="symbol">csrf_token:</span> csrf_token,</span><br><span class="line">      <span class="symbol">changeset:</span> changeset,</span><br><span class="line">      <span class="symbol">pricing_plan:</span> pricing_plan</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    &#123;<span class="symbol">:ok</span>, assign(socket, assigns)&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">render</span></span>(assigns) <span class="keyword">do</span></span><br><span class="line">    KickstartWeb.Admin.PricingPlanView.render(<span class="string">"form.html"</span>, assigns)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">handle_event</span></span>(<span class="string">"add-feature"</span>, _, socket) <span class="keyword">do</span></span><br><span class="line">    vars = Map.get(socket.assigns.changeset.changes, <span class="symbol">:features</span>, socket.assigns.pricing_plan.features)</span><br><span class="line"></span><br><span class="line">    features =</span><br><span class="line">      vars</span><br><span class="line">      |&gt; Enum.concat([</span><br><span class="line">        PricingPlans.change_feature(%Feature&#123;<span class="symbol">temp_id:</span> get_temp_id()&#125;)</span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">    changeset =</span><br><span class="line">      socket.assigns.changeset</span><br><span class="line">      |&gt; Ecto.Changeset.put_embed(<span class="symbol">:features</span>, features)</span><br><span class="line"></span><br><span class="line">    &#123;<span class="symbol">:noreply</span>, assign(socket, <span class="symbol">changeset:</span> changeset)&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">handle_event</span></span>(<span class="string">"remove-feature"</span>, %&#123;<span class="string">"remove"</span> =&gt; remove_id&#125;, socket) <span class="keyword">do</span></span><br><span class="line">    features =</span><br><span class="line">      socket.assigns.changeset.changes.features</span><br><span class="line">      |&gt; Enum.reject(<span class="keyword">fn</span> %&#123;<span class="symbol">data:</span> feature&#125; -&gt;</span><br><span class="line">        feature.temp_id == remove_id</span><br><span class="line">      <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    changeset =</span><br><span class="line">      socket.assigns.changeset</span><br><span class="line">      |&gt; Ecto.Changeset.put_embed(<span class="symbol">:features</span>, features)</span><br><span class="line"></span><br><span class="line">    &#123;<span class="symbol">:noreply</span>, assign(socket, <span class="symbol">changeset:</span> changeset)&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_pricing_plan</span></span>(%&#123;<span class="string">"id"</span> =&gt; id&#125; = _pricing_plan_params), <span class="symbol">do:</span> Accounts.get_pricing_plan!(id)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_pricing_plan</span></span>(_pricing_plan_params), <span class="symbol">do:</span> %PricingPlan&#123;<span class="symbol">features:</span> []&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">get_temp_id</span></span>, <span class="symbol">do:</span> <span class="symbol">:crypto</span>.strong_rand_bytes(<span class="number">5</span>) |&gt; Base.url_encode64 |&gt; binary_part(0, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Update our edit and new templates (new will be similar - just remove an id from the session):</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"torch-header-and-content"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"torch-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Edit Pricing plan<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=</span> <span class="attr">live_render</span> @<span class="attr">conn</span>, <span class="attr">KickstartWeb.PricingPlanFormLive</span>,</span></span><br><span class="line"><span class="tag">      <span class="attr">session:</span> %&#123;</span></span><br><span class="line"><span class="tag">        "<span class="attr">id</span>" =&gt;</span> @pricing_plan.id,</span><br><span class="line">        "action" =&gt; Routes.admin_pricing_plan_path(@conn, :update, @pricing_plan),</span><br><span class="line">        "csrf_token" =&gt; Plug.CSRFProtection.get_csrf_token()</span><br><span class="line">       &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p>And this is our form with nested inputs (please remember to change the extension to .leex):j</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">form_for</span> @<span class="attr">changeset</span>, @<span class="attr">action</span>, [<span class="attr">multipart:</span> <span class="attr">true</span>, <span class="attr">csrf_token:</span> @<span class="attr">csrf_token</span>], <span class="attr">fn</span> <span class="attr">f</span> <span class="attr">-</span>&gt;</span> %&gt;</span><br><span class="line"></span><br><span class="line">  (... list of inputs ... )</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">legend</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Features<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">%=</span> <span class="attr">inputs_for</span> <span class="attr">f</span>, <span class="attr">:features</span>, <span class="attr">fn</span> <span class="attr">v</span> <span class="attr">-</span>&gt;</span> %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flex flex-wrap -mx-1 overflow-hidden"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"torch-form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%=</span> <span class="attr">label</span> <span class="attr">v</span>, <span class="attr">:title</span>%&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%=</span> <span class="attr">text_input</span> <span class="attr">v</span>, <span class="attr">:title</span>, <span class="attr">class:</span> "<span class="attr">form-control</span>" %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%=</span> <span class="attr">error_tag</span> <span class="attr">v</span>, <span class="attr">:title</span> %&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"torch-form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%=</span> <span class="attr">label</span> <span class="attr">v</span>, <span class="attr">:delete</span> %&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%=</span> <span class="attr">if</span> <span class="attr">is_nil</span>(<span class="attr">v.data.temp_id</span>) <span class="attr">do</span> %&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">%=</span> <span class="attr">checkbox</span> <span class="attr">v</span>, <span class="attr">:delete</span> %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">else</span> %&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">%=</span> <span class="attr">hidden_input</span> <span class="attr">v</span>, <span class="attr">:temp_id</span> %&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">phx-click</span>=<span class="string">"remove-feature"</span> <span class="attr">phx-value-remove</span>=<span class="string">"&lt;%= v.data.temp_id %&gt;"</span>&gt;</span>&amp;times<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">phx-click</span>=<span class="string">"add-feature"</span>&gt;</span>Add feature<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  (... submit button ... )</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br></pre></td></tr></table></figure><h2>Summary</h2><p>I got stuck for a while when working on this feature because my initial implementation used mount/2 instead of mount/3. Apart from this implementing this with the live view was quite enjoyable and I’m very happy with the final result.<br>Here you can see how it works:<br><img src="nested-form.gif" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Every pricing plan needs to list of features. To allow users to type all related data in one form we want to implement something that is </summary>
      
    
    
    
    
    <category term="elixir" scheme="http://rafaltrojanowski.github.io/tags/elixir/"/>
    
    <category term="phoenix" scheme="http://rafaltrojanowski.github.io/tags/phoenix/"/>
    
    <category term="live view" scheme="http://rafaltrojanowski.github.io/tags/live-view/"/>
    
    <category term="nested form" scheme="http://rafaltrojanowski.github.io/tags/nested-form/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code - Code Snippets</title>
    <link href="http://rafaltrojanowski.github.io/2020/12/02/vscode-code-snippets/"/>
    <id>http://rafaltrojanowski.github.io/2020/12/02/vscode-code-snippets/</id>
    <published>2020-12-02T10:55:22.000Z</published>
    <updated>2021-06-24T08:06:26.105Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I watched some Ruby on Rails live-stream and I found out that there is nice feature in VSCode that I didn’t know.</p><p>It’s possible to build custom code snippets and use them with only a few keystrokes. This is great productivity improvement.</p><p>I added two snippets for Rspec code skeleton and simple Ruby class with two predefined methods, like this:</p><p>Code -&gt; Preferences -&gt; User Snippets -&gt; ruby.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"Rspec template"</span>: &#123;</span><br><span class="line"><span class="attr">"prefix"</span>: <span class="string">"desc"</span>,</span><br><span class="line"><span class="attr">"body"</span>: [</span><br><span class="line"><span class="string">"require 'rails_helper'"</span>,</span><br><span class="line"><span class="string">""</span>,</span><br><span class="line"><span class="string">"describe MyClass do"</span>,</span><br><span class="line"><span class="string">"  subject &#123; described_class.new(params) &#125;"</span>,</span><br><span class="line"><span class="string">"  let(:params) &#123;&#123;"</span>,</span><br><span class="line"><span class="string">""</span>,</span><br><span class="line"><span class="string">"  &#125;&#125;"</span>,</span><br><span class="line"><span class="string">""</span>,</span><br><span class="line"><span class="string">"  context '' do"</span>,</span><br><span class="line"><span class="string">"    it '' do"</span>,</span><br><span class="line"><span class="string">""</span>,</span><br><span class="line"><span class="string">"    end"</span>,</span><br><span class="line"><span class="string">"  end"</span>,</span><br><span class="line"><span class="string">"end"</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"description"</span>: <span class="string">"Generates RSpec inital skeleton"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"Class template"</span>: &#123;</span><br><span class="line"><span class="attr">"prefix"</span>: <span class="string">"cls"</span>,</span><br><span class="line"><span class="attr">"body"</span>: [</span><br><span class="line"><span class="string">"# frozen_string_literal: true"</span>,</span><br><span class="line"><span class="string">""</span>,</span><br><span class="line"><span class="string">"class MyClass"</span>,</span><br><span class="line"><span class="string">""</span>,</span><br><span class="line"><span class="string">"  def initialize()"</span>,</span><br><span class="line"><span class="string">""</span>,</span><br><span class="line"><span class="string">"  end"</span>,</span><br><span class="line"><span class="string">""</span>,</span><br><span class="line"><span class="string">"  def self.call()"</span>,</span><br><span class="line"><span class="string">""</span>,</span><br><span class="line"><span class="string">"  end"</span>,</span><br><span class="line"><span class="string">"end"</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"description"</span>: <span class="string">"Generates new Class template"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Link to docs: <a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets" target="_blank" rel="noopener">https://code.visualstudio.com/docs/editor/userdefinedsnippets</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Recently, I watched some Ruby on Rails live-stream and I found out that there is nice feature in VSCode that I didn’t know.&lt;/p&gt;
&lt;p&gt;It’s p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Visualize Four Types Of SQL Joins In Rails</title>
    <link href="http://rafaltrojanowski.github.io/2020/11/03/visualize-four-types-of-joins-in-rails/"/>
    <id>http://rafaltrojanowski.github.io/2020/11/03/visualize-four-types-of-joins-in-rails/</id>
    <published>2020-11-03T17:33:55.000Z</published>
    <updated>2021-06-24T08:06:26.104Z</updated>
    
    <content type="html"><![CDATA[<p>According to <a href="https://www.w3schools.com/sql/sql_join.asp" target="_blank" rel="noopener">https://www.w3schools.com/sql/sql_join.asp</a> there are four types of joins in SQL. In fact there is also self-join and cross join but lets focus on:<br>INNER JOIN, LEFT (OUTER) JOIN, RIGHT (OUTER) JOIN, FULL (OUTER) JOIN.</p><p>Assume that we have following factories:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let!(<span class="symbol">:user_1</span>) &#123; create(<span class="symbol">:user</span>)&#125; <span class="comment"># user with 2 trips</span></span><br><span class="line">let!(<span class="symbol">:user_2</span>) &#123; create(<span class="symbol">:user</span>)&#125; <span class="comment"># user with 1 trip</span></span><br><span class="line">let!(<span class="symbol">:user_3</span>) &#123; create(<span class="symbol">:user</span>)&#125; <span class="comment"># user with no trips</span></span><br><span class="line"></span><br><span class="line">let!(<span class="symbol">:trip_1</span>) &#123; create(<span class="symbol">:trip</span>, <span class="symbol">user:</span> user_1) &#125;</span><br><span class="line">let!(<span class="symbol">:trip_2</span>) &#123; create(<span class="symbol">:trip</span>, <span class="symbol">user:</span> user_1) &#125;</span><br><span class="line">let!(<span class="symbol">:trip_3</span>) &#123; create(<span class="symbol">:trip</span>, <span class="symbol">user:</span> user_2) &#125;</span><br><span class="line">let!(<span class="symbol">:trip_4</span>) &#123; create(<span class="symbol">:trip</span>, <span class="symbol">user:</span> <span class="literal">nil</span>) &#125; <span class="comment"># trip with no user</span></span><br></pre></td></tr></table></figure><h2>1. INNER JOIN</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">inner_join = User.joins(<span class="symbol">:trips</span>)</span><br><span class="line">puts inner_join.to_sql </span><br><span class="line"><span class="comment"># =&gt;  SELECT "users".* FROM "users" INNER JOIN "trips" ON "trips"."user_id" = "users"."id"</span></span><br><span class="line"></span><br><span class="line">expect(inner_join.count).to eq(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">inner_join.each <span class="keyword">do</span> <span class="params">|user|</span></span><br><span class="line">  puts [user.id, user.trips.pluck(<span class="symbol">:id</span>)].inspect</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; </span></span><br><span class="line">[<span class="number">364</span>, [<span class="number">485</span>, <span class="number">486</span>]]</span><br><span class="line">[<span class="number">364</span>, [<span class="number">485</span>, <span class="number">486</span>]]</span><br><span class="line">[<span class="number">365</span>, [<span class="number">487</span>]]</span><br></pre></td></tr></table></figure><p>Keep in mind that you should use <code>.distinct</code> at the end of the query chain to get unique rows.</p><h2>2. LEFT (OUTER) JOIN</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">left_outer_join = User.left_outer_joins(<span class="symbol">:trips</span>) <span class="comment"># or simply use an alias: left_joins </span></span><br><span class="line">puts left_outer_join.to_sql</span><br><span class="line"><span class="comment"># =&gt; SELECT "users".* FROM "users" LEFT OUTER JOIN "trips" ON "trips"."user_id" = "users"."id"</span></span><br><span class="line"></span><br><span class="line">expect(left_outer_join.count).to eq(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">left_outer_join.each <span class="keyword">do</span> <span class="params">|user|</span></span><br><span class="line">  puts [user.id, user.trips.pluck(<span class="symbol">:id</span>)].inspect</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; </span></span><br><span class="line">[<span class="number">367</span>, [<span class="number">489</span>, <span class="number">490</span>]]</span><br><span class="line">[<span class="number">367</span>, [<span class="number">489</span>, <span class="number">490</span>]]</span><br><span class="line">[<span class="number">368</span>, [<span class="number">491</span>]]</span><br><span class="line">[<span class="number">369</span>, []]</span><br></pre></td></tr></table></figure><h4>Possible use case of using LEFT (OUTER) JOIN:</h4><p>Counting how many trips every user has:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">query = left_outer_join</span><br><span class="line">  .select(<span class="string">"users.*, COUNT(trips.*) as trips_count"</span>)</span><br><span class="line">  .group(<span class="string">'users.id'</span>).count(<span class="string">'trips.*'</span>)</span><br><span class="line"></span><br><span class="line">puts query.inspect</span><br><span class="line"><span class="comment"># =&gt; </span></span><br><span class="line">&#123;<span class="number">519</span>=&gt;<span class="number">0</span>, <span class="number">517</span>=&gt;<span class="number">2</span>, <span class="number">518</span>=&gt;<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><h2>3. RIGHT (OUTER) JOIN</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">right_outer_join = User.joins(<span class="string">'RIGHT OUTER JOIN trips ON trips.user_id = users.id'</span>)</span><br><span class="line">puts right_outer_join.to_sql</span><br><span class="line"><span class="comment"># =&gt; SELECT "users".* FROM "users" RIGHT OUTER JOIN trips ON trips.user_id = users.id</span></span><br><span class="line"></span><br><span class="line">expect(right_outer_join.count).to eq(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">right_outer_join.each <span class="keyword">do</span> <span class="params">|user|</span></span><br><span class="line">  puts [user.id, user.trips.pluck(<span class="symbol">:id</span>)].inspect</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># =&gt; </span></span><br><span class="line">[<span class="number">370</span>, [<span class="number">493</span>, <span class="number">494</span>]]</span><br><span class="line">[<span class="number">370</span>, [<span class="number">493</span>, <span class="number">494</span>]]</span><br><span class="line">[<span class="number">371</span>, [<span class="number">495</span>]]</span><br><span class="line">[<span class="literal">nil</span>, [<span class="number">496</span>]]</span><br></pre></td></tr></table></figure><h2>4. FULL (OUTER) JOIN</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">full_outer_join = User.joins(<span class="string">'FULL OUTER JOIN trips ON trips.user_id = users.id'</span>)</span><br><span class="line">puts full_outer_join.to_sql</span><br><span class="line"><span class="comment"># =&gt; SELECT "users".* FROM "users" FULL OUTER JOIN trips ON trips.user_id = users.id</span></span><br><span class="line"></span><br><span class="line">expect(full_outer_join.count).to eq(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">full_outer_join.each <span class="keyword">do</span> <span class="params">|user|</span></span><br><span class="line">  puts [user.id, user.trips.pluck(<span class="symbol">:id</span>)].inspect</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># =&gt; </span></span><br><span class="line">[<span class="number">373</span>, [<span class="number">497</span>, <span class="number">498</span>]]</span><br><span class="line">[<span class="number">373</span>, [<span class="number">497</span>, <span class="number">498</span>]]</span><br><span class="line">[<span class="number">374</span>, [<span class="number">499</span>]]</span><br><span class="line">[<span class="literal">nil</span>, [<span class="number">500</span>]]</span><br><span class="line">[<span class="number">375</span>, []]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;According to &lt;a href=&quot;https://www.w3schools.com/sql/sql_join.asp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.w3schools.com/sql/sql_join.a</summary>
      
    
    
    
    
    <category term="ruby on rails, sql, joins" scheme="http://rafaltrojanowski.github.io/tags/ruby-on-rails-sql-joins/"/>
    
  </entry>
  
  <entry>
    <title>My first dive into DDD concepts in Ruby</title>
    <link href="http://rafaltrojanowski.github.io/2020/10/21/my-first-dive-into-ddd-in-ruby/"/>
    <id>http://rafaltrojanowski.github.io/2020/10/21/my-first-dive-into-ddd-in-ruby/</id>
    <published>2020-10-21T12:41:51.000Z</published>
    <updated>2024-03-28T19:15:27.164Z</updated>
    
    <content type="html"><![CDATA[<h3>Intro</h3><p>For someone who is experiencing Rails fatigue, it would be worth looking into alternatives for developing architectures with Ruby. It does not mean that it would require abandoning Rails at all because there are solutions that allow developing DDD concepts with the most popular Ruby framework. I will leave a discussion about whether you need this architecture approach in your app or not and only focus on how to start with DDD if you are not familiar with it.</p><h2>Possible solutions</h2><p>Based on my research, it looks like there are two possible ways to go with DDD in Ruby. The first one is Eventide with code examples available here: <a href="https://github.com/eventide-examples" target="_blank" rel="noopener">https://github.com/eventide-examples</a><br>These are pure Ruby examples. There is also the Eventide Rails project. However, not much is going there:<br><a href="https://github.com/eventide-project/eventide-rails" target="_blank" rel="noopener">https://github.com/eventide-project/eventide-rails</a><br>The second one is the Rails Event Store with a demo app: <a href="https://github.com/RailsEventStore/cqrs-es-sample-with-res" target="_blank" rel="noopener">https://github.com/RailsEventStore/cqrs-es-sample-with-res</a><br>It is integration with Rails, and a demo is also available on Heroku, which makes it very easy to play with it. </p><p>After having a look into Eventide examples and the CQRS project, what is similar between them is the concept of Commands and Events. For someone familiar with Rails who want to get hands dirty with Domain-Driven Design,  I believe that the great place to start is cqrs-es-sample-with-res repo from Rails Event Store. So let’s have a look.</p><h2>Rails Event Store</h2><p>As you probably know from the previous section, the gem that brings all the necessary things to start the journey with Domain-Driven Design and Rails is called Rails Event Store.<br>The demo repo is actively maintained, consists of a use case of an e-commerce store with the implementation of around ten events that model business operations. For those who want to learn more, there are also Docs available here: <a href="https://railseventstore.org/" target="_blank" rel="noopener">https://railseventstore.org/</a></p><p>I decided to run a demo project locally, generate some events, and then connect database GUI client to see how Events have been stored in the database and what’s going on with other data like typical Rails models. Later on, to fully understand how things work, I added my custom Event.</p><h3>Adding custom event</h3><h4> Step 1. Trigger command in Rails controller.</h4><p>This part is easy. So here is where all the journey starts. I decided to add a tracking event when the user visits the Order page, so I need to call the following code in OrdersController#show action:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/controllers/orders_controller.rb</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">show</span></span></span><br><span class="line">     @order       = Orders::Order.find(params[<span class="symbol">:id</span>])</span><br><span class="line">     @order_lines = Orders::OrderLine.where(<span class="symbol">order_uid:</span> @order.uid)</span><br><span class="line">+    command_bus.(Ordering::VisitOrder.new(<span class="symbol">order_uid:</span> @order.uid))</span><br><span class="line">   <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>The integration of this code with a controller requires changes in two other places. We need to register our command:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ordering/lib/ordering/visit_order.rb</span></span><br><span class="line">+<span class="class"><span class="keyword">module</span> <span class="title">Ordering</span></span></span><br><span class="line">+  <span class="class"><span class="keyword">class</span> <span class="title">VisitOrder</span> &lt; Command</span></span><br><span class="line">+    attribute <span class="symbol">:order_uid</span>, Types::UUID</span><br><span class="line">+  <span class="keyword">end</span></span><br><span class="line">+<span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>To finalize this part, the configuration for our command bus is needed:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/initializers/rails_event_store.rb</span></span><br><span class="line">   Rails.configuration.command_bus.tap <span class="keyword">do</span> <span class="params">|bus|</span></span><br><span class="line">+    bus.register(Ordering::VisitOrder, Ordering::OnVisitOrder.new)</span><br><span class="line">   <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4> Step 2. Command Handler.</h4><p>The next step is to handle our Command in the following file:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ordering/lib/ordering/on_visit_order.rb</span></span><br><span class="line">+<span class="class"><span class="keyword">module</span> <span class="title">Ordering</span></span></span><br><span class="line">+  <span class="class"><span class="keyword">class</span> <span class="title">OnVisitOrder</span></span></span><br><span class="line">+    <span class="keyword">include</span> CommandHandler</span><br><span class="line">+</span><br><span class="line">+    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(command)</span></span></span><br><span class="line">+      with_aggregate(Order, command.order_uid) <span class="keyword">do</span> <span class="params">|order|</span></span><br><span class="line">+        order.visit</span><br><span class="line">+      <span class="keyword">end</span></span><br><span class="line">+    <span class="keyword">end</span></span><br><span class="line">+  <span class="keyword">end</span></span><br><span class="line">+<span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>The code above calls the Order#visit instance method, which implements the following code:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ordering/lib/ordering/order.rb</span></span><br><span class="line">+<span class="function"><span class="keyword">def</span> <span class="title">visit</span></span></span><br><span class="line">+  apply OrderVisited.new(<span class="symbol">data:</span> &#123;<span class="symbol">order_id:</span> @id&#125;)</span><br><span class="line">+<span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4> Step 3. The last part, Event.</h4><p>And here is the moment where I got stuck for a moment. I got the following error:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Missing handler method apply_order_visited on aggregate Ordering::Order</span><br></pre></td></tr></table></figure><p>Let’s fix it by adding the following code in the same file:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ordering/lib/ordering/order.rb</span></span><br><span class="line">+on OrderVisited <span class="keyword">do</span> <span class="params">|event|</span></span><br><span class="line">+  <span class="comment"># do nothing</span></span><br><span class="line">+<span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>The last part is to handle our Event. To do this, we need to update our code in a few places. Add an Event:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ordering/lib/ordering/order_visited.rb</span></span><br><span class="line">+<span class="class"><span class="keyword">module</span> <span class="title">Ordering</span></span></span><br><span class="line">+  <span class="class"><span class="keyword">class</span> <span class="title">OrderVisited</span> &lt; Event</span></span><br><span class="line">+    attribute <span class="symbol">:order_id</span>, Types::UUID</span><br><span class="line">+  <span class="keyword">end</span></span><br><span class="line">+<span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Add subscription in config:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#config/initializers/rails_event_store.rb</span></span><br><span class="line">  Rails.configuration.event_store.tap <span class="keyword">do</span> <span class="params">|store|</span></span><br><span class="line">+    store.subscribe(Orders::OnOrderVisited, <span class="symbol">to:</span> [Ordering::OrderVisited])</span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>And the final part where the actual business logic happens is our read model. This read model is placed all together with other models like order or order_line (ActiveRecord):</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/read_models/orders/on_order_visited.rb</span></span><br><span class="line">+<span class="class"><span class="keyword">module</span> <span class="title">Orders</span></span></span><br><span class="line">+  <span class="class"><span class="keyword">class</span> <span class="title">OnOrderVisited</span></span></span><br><span class="line">+    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(event)</span></span></span><br><span class="line">+      order = Order.find_by(<span class="symbol">uid:</span> event.data[<span class="symbol">:order_id</span>])</span><br><span class="line">+</span><br><span class="line">+      order.visit_count += <span class="number">1</span></span><br><span class="line">+      order.save!</span><br><span class="line">+    <span class="keyword">end</span></span><br><span class="line">+  <span class="keyword">end</span></span><br><span class="line">+<span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3>Conclusion</h3><p>Because there is no Demo app for the Eventide project that shows how to integrate it with Rails, I decided to go with RES to learn more about DDD. For someone already familiar with DDD concepts, it would be good to give Eventide repo a shoot. Check this blog post for more info: <a href="https://blog.arkency.com/my-first-10-minutes-with-eventide/" target="_blank" rel="noopener">https://blog.arkency.com/my-first-10-minutes-with-eventide/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;Intro&lt;/h3&gt;

&lt;p&gt;For someone who is experiencing Rails fatigue, it would be worth looking into alternatives for developing architectures w</summary>
      
    
    
    
    
    <category term="ruby" scheme="http://rafaltrojanowski.github.io/tags/ruby/"/>
    
    <category term="rails" scheme="http://rafaltrojanowski.github.io/tags/rails/"/>
    
    <category term="ddd" scheme="http://rafaltrojanowski.github.io/tags/ddd/"/>
    
    <category term="event sourcing" scheme="http://rafaltrojanowski.github.io/tags/event-sourcing/"/>
    
    <category term="CQRS" scheme="http://rafaltrojanowski.github.io/tags/CQRS/"/>
    
  </entry>
  
  <entry>
    <title>How to Dockerize Rails 6 App</title>
    <link href="http://rafaltrojanowski.github.io/2020/09/21/how-to-dockerize-rails-6-app/"/>
    <id>http://rafaltrojanowski.github.io/2020/09/21/how-to-dockerize-rails-6-app/</id>
    <published>2020-09-21T08:16:41.000Z</published>
    <updated>2021-06-24T08:06:26.104Z</updated>
    
    <content type="html"><![CDATA[<p>First step, add Dockerfile:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">FROM ruby:2.6.3</span><br><span class="line">RUN apt-get update -qq &amp;&amp; apt-get install -y nodejs npm postgresql-client</span><br><span class="line">RUN mkdir &#x2F;myapp</span><br><span class="line">WORKDIR &#x2F;myapp</span><br><span class="line">COPY Gemfile &#x2F;myapp&#x2F;Gemfile</span><br><span class="line">COPY Gemfile.lock &#x2F;myapp&#x2F;Gemfile.lock</span><br><span class="line">COPY yarn.lock &#x2F;myapp&#x2F;yarn.lock</span><br><span class="line">RUN gem update --system</span><br><span class="line">RUN gem install bundler -v 2.0.1</span><br><span class="line">RUN bundle install</span><br><span class="line">RUN npm install -g yarn</span><br><span class="line">COPY . &#x2F;myapp</span><br><span class="line">RUN yarn install --check-file</span><br><span class="line"></span><br><span class="line"># Add a script to be executed every time the container starts.</span><br><span class="line">COPY entrypoint.sh &#x2F;usr&#x2F;bin&#x2F;</span><br><span class="line">RUN chmod +x &#x2F;usr&#x2F;bin&#x2F;entrypoint.sh</span><br><span class="line">ENTRYPOINT [&quot;entrypoint.sh&quot;]</span><br><span class="line">EXPOSE 3000</span><br></pre></td></tr></table></figure><p>entrypoint.sh:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line"># Remove a potentially pre-existing server.pid for Rails.</span><br><span class="line">rm -f &#x2F;myapp&#x2F;tmp&#x2F;pids&#x2F;server.pid</span><br><span class="line"></span><br><span class="line"># Then exec the container&#39;s main process (what&#39;s set as CMD in the Dockerfile).</span><br><span class="line">exec &quot;$@&quot;</span><br></pre></td></tr></table></figure><p>Then add docker-compose:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">version: &#39;3&#39;</span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: postgres</span><br><span class="line">    volumes:</span><br><span class="line">      - .&#x2F;tmp&#x2F;db:&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    command: bash -c &quot;rm -f tmp&#x2F;pids&#x2F;server.pid &amp;&amp; bundle exec rails s -p 3000 -b &#39;0.0.0.0&#39;&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - .:&#x2F;myapp</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3000:3000&quot;</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">    environment:</span><br><span class="line">      RAILS_ENV: development</span><br><span class="line">      APP_DATABASE_HOSTNAME: db</span><br></pre></td></tr></table></figure><p>database.yml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">default: &amp;default</span><br><span class="line">  encoding: unicode</span><br><span class="line"></span><br><span class="line">  # Host need to be set to work correctly with Docker</span><br><span class="line">  host: &lt;%&#x3D; ENV[&#39;APP_DATABASE_HOSTNAME&#39;] || &#39;localhost&#39; %&gt;</span><br><span class="line">  username: postgres</span><br><span class="line">  password: password</span><br><span class="line">  pool: &lt;%&#x3D; ENV.fetch(&quot;RAILS_MAX_THREADS&quot;) &#123; 5 &#125; %&gt;</span><br></pre></td></tr></table></figure><ul><li>Username and password are required for Docker</li><li>With this setup it’s possible to run app with and without Docker </li></ul><p>config/environments/development.rb:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># https:&#x2F;&#x2F;github.com&#x2F;rails&#x2F;webpacker&#x2F;issues&#x2F;1568</span><br><span class="line">config.webpacker.check_yarn_integrity &#x3D; false</span><br></pre></td></tr></table></figure><p>That’s all configuration. Now a few useful commands:</p><p>Build &amp; run containers</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p>Run containers with build (flag is necessary when changes to Gemfile or Dockerfiles has been made)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up --build</span><br></pre></td></tr></table></figure><p>Shutdown containers:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><p>Run Rails console:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run web bundle exec rails console</span><br></pre></td></tr></table></figure><p>Run bash:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run web bash</span><br></pre></td></tr></table></figure><p>Run only pg container:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run db</span><br></pre></td></tr></table></figure><p>Check all running containers:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;First step, add Dockerfile:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    
    <category term="ruby on rails" scheme="http://rafaltrojanowski.github.io/tags/ruby-on-rails/"/>
    
    <category term="docker" scheme="http://rafaltrojanowski.github.io/tags/docker/"/>
    
    <category term="docker-compose" scheme="http://rafaltrojanowski.github.io/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>Surround lines with quotes</title>
    <link href="http://rafaltrojanowski.github.io/2019/09/05/surround-lines-with-quotes/"/>
    <id>http://rafaltrojanowski.github.io/2019/09/05/surround-lines-with-quotes/</id>
    <published>2019-09-05T11:48:10.000Z</published>
    <updated>2021-06-24T08:06:26.104Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I have been transferring a huge file (more than 7k lines) to <code>Ruby#Array()</code>.</p><p>Fragment:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Mozilla&#x2F;5.0 (Amiga; U; AmigaOS 1.3; en; rv:1.8.1.19) Gecko&#x2F;20081204 SeaMonkey&#x2F;1.1.14</span><br><span class="line">Mozilla&#x2F;5.0 (AmigaOS; U; AmigaOS 1.3; en-US; rv:1.8.1.21) Gecko&#x2F;20090303 SeaMonkey&#x2F;1.1.15</span><br><span class="line">Mozilla&#x2F;5.0 (AmigaOS; U; AmigaOS 1.3; en; rv:1.8.1.19) Gecko&#x2F;20081204 SeaMonkey&#x2F;1.1.14</span><br><span class="line">(...)</span><br></pre></td></tr></table></figure><p>What I needed was:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AGENTS = [</span><br><span class="line">  <span class="string">"Mozilla/5.0 (Amiga; U; AmigaOS 1.3; en; rv:1.8.1.19) Gecko/20081204 SeaMonkey/1.1.14"</span>,</span><br><span class="line">  <span class="string">"Mozilla/5.0 (AmigaOS; U; AmigaOS 1.3; en-US; rv:1.8.1.21) Gecko/20090303 SeaMonkey/1.1.15"</span>,</span><br><span class="line">  <span class="string">"Mozilla/5.0 (AmigaOS; U; AmigaOS 1.3; en; rv:1.8.1.19) Gecko/20081204 SeaMonkey/1.1.14"</span>,</span><br><span class="line">  (...)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Modifying this manually is overkill, isn’t it? Honestly, last time I ended with copying only a few first lines and do boring manual work, but this time I decided to add functionality that allows to chose random User-Agent from the whole list.</p><p>My first thought was to use Vim macro, see here: <a href="http://vim.wikia.com/wiki/Macros" target="_blank" rel="noopener">http://vim.wikia.com/wiki/Macros</a></p><p>Thankfully, I found a faster and easier solution for how to wrap quickly my data.</p><p>There is <code>sed</code> command in Linux: <a href="https://www.geeksforgeeks.org/sed-command-in-unix/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/sed-command-in-unix/</a></p><p>So what I did is:</p><p>First, I copied all lines of <code>User-Agents</code> to empty Ruby file.</p><p>Then:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -e &quot;s&#x2F;\(.*\)&#x2F;&#39;\1&#39;&#x2F;&quot; agents.rb &gt; temp_quotes.rb</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -e &quot;s&#x2F;\(.*\)&#x2F;\1,&#x2F;&quot; temp_quotes.rb &gt; temp_comma.rb</span><br></pre></td></tr></table></figure><p>Finally:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv temp_comma user_agents.rb</span><br></pre></td></tr></table></figure><p>Voila!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Recently, I have been transferring a huge file (more than 7k lines) to &lt;code&gt;Ruby#Array()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Fragment:&lt;/p&gt;
&lt;figure class=&quot;hig</summary>
      
    
    
    
    
    <category term="nix" scheme="http://rafaltrojanowski.github.io/tags/nix/"/>
    
    <category term="shell" scheme="http://rafaltrojanowski.github.io/tags/shell/"/>
    
    <category term="command" scheme="http://rafaltrojanowski.github.io/tags/command/"/>
    
    <category term="web-development" scheme="http://rafaltrojanowski.github.io/tags/web-development/"/>
    
  </entry>
  
  <entry>
    <title>Vim`s global search and replace</title>
    <link href="http://rafaltrojanowski.github.io/2019/01/29/vims-global-search-and-replace/"/>
    <id>http://rafaltrojanowski.github.io/2019/01/29/vims-global-search-and-replace/</id>
    <published>2019-01-29T15:11:20.000Z</published>
    <updated>2021-06-24T08:06:26.104Z</updated>
    
    <content type="html"><![CDATA[<p>I have been looking for efficient solution how to refractor code with Vim for a while,<br>so I’d like to share it with you. That’s an extremely easy:</p><ol><li>Search (<a href='https://github.com/mileszs/ack.vim' target="_blank" rel="noopener">Tool from Vim</a>):</li></ol><p><code>:Ack OldClassName **/*.rb **/*.rake</code></p><ol start="2"><li>Apply changes on results (optional):</li></ol><p><code>:cdo g/OldClassName/s/OldClassName/NewClassName/ge</code></p><ol start="3"><li>Update and save at once:</li></ol><p><code>:cdo %s/OldClassName/NewClassName/ge | update</code></p><p>Big thanks to Sebastian for sharing this trick with me.</p><p>Check out his blog post <a href='https://driggl.com/blog/a/should-you-start-using-vim' target="_blank" rel="noopener">Should You start using VIM?</a></p><p>Big up!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I have been looking for efficient solution how to refractor code with Vim for a while,&lt;br&gt;so I’d like to share it with you. That’s an ext</summary>
      
    
    
    
    
    <category term="programming" scheme="http://rafaltrojanowski.github.io/tags/programming/"/>
    
    <category term="vim" scheme="http://rafaltrojanowski.github.io/tags/vim/"/>
    
    <category term="editor" scheme="http://rafaltrojanowski.github.io/tags/editor/"/>
    
    <category term="development" scheme="http://rafaltrojanowski.github.io/tags/development/"/>
    
  </entry>
  
  <entry>
    <title>Use Array() to array-ify inputs in Ruby</title>
    <link href="http://rafaltrojanowski.github.io/2018/12/04/ruby-array-conversion-function/"/>
    <id>http://rafaltrojanowski.github.io/2018/12/04/ruby-array-conversion-function/</id>
    <published>2018-12-04T09:39:23.000Z</published>
    <updated>2021-06-24T08:06:26.104Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Kernel#Array</strong> takes an argument and tries very hard to convert it into an <strong>Array</strong>.</p><p>Let’s look at some examples:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])                 <span class="comment"># =&gt; [1,2,3]</span></span><br><span class="line">Array([])                      <span class="comment"># =&gt; []</span></span><br><span class="line">Array(<span class="literal">nil</span>)                     <span class="comment"># =&gt; []</span></span><br><span class="line">Array(&#123;<span class="symbol">:a</span> =&gt; <span class="number">1</span>, <span class="symbol">:b</span> =&gt; <span class="number">2</span>&#125;)      <span class="comment"># =&gt; [[:a, 1], [:b, 2]]</span></span><br><span class="line">Array(<span class="number">1</span>..<span class="number">5</span>)                    <span class="comment"># =&gt; [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>Using <strong>Kernel#Array</strong> can lead to very forgiving APIs.</p><p>Consider following method:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_reading</span><span class="params">(reading_or_readings)</span></span></span><br><span class="line">  readings = Array(reading_or_readings)</span><br><span class="line">  readings.each <span class="keyword">do</span> <span class="params">|reading|</span></span><br><span class="line">    <span class="comment"># A real implementation...</span></span><br><span class="line"></span><br><span class="line">    puts <span class="string">"[READING] %3.2f"</span> % reading.to_f</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log_reading(<span class="number">3.14</span>)</span><br><span class="line">log_reading([])</span><br><span class="line">log_reading([<span class="number">84.4</span>, <span class="number">23.8675</span>, <span class="number">33</span>])</span><br><span class="line">log_reading(<span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[READING] 3.14</span><br><span class="line">[READING] 84.40</span><br><span class="line">[READING] 23.87</span><br><span class="line">[READING] 33.00</span><br></pre></td></tr></table></figure><h1>Conclusion</h1><p><strong>Kernel#Array</strong> is a go-to tool for coercing inputs into Array form.<br>I throw Kernel#Array and stop worrying about whether the input arrived in the expected form.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Kernel#Array&lt;/strong&gt; takes an argument and tries very hard to convert it into an &lt;strong&gt;Array&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let’s look at so</summary>
      
    
    
    
    
    <category term="ruby" scheme="http://rafaltrojanowski.github.io/tags/ruby/"/>
    
    <category term="code" scheme="http://rafaltrojanowski.github.io/tags/code/"/>
    
    <category term="best-practices" scheme="http://rafaltrojanowski.github.io/tags/best-practices/"/>
    
  </entry>
  
  <entry>
    <title>Redirect back with Ember.Location</title>
    <link href="http://rafaltrojanowski.github.io/2017/10/21/ember-location/"/>
    <id>http://rafaltrojanowski.github.io/2017/10/21/ember-location/</id>
    <published>2017-10-21T07:46:15.000Z</published>
    <updated>2021-06-24T08:06:26.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>In the approach with routable modal described in previous posts, there is one drawback. Closing link located in the modal needs to be handled with additional logic if we want to achieve the same effect when we don’t use a routable approach. In the routable approach we open modal for a specific route so close action needs to make a redirect to the previous route from the history.</p><p>We can handle closing modal by simple link-to pointing to the main application route. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;#full-screen-modal-dialog&#125;&#125;</span><br><span class="line">  &#123;&#123;#link-to "application"&#125;&#125;Close&#123;&#123;/link-to&#125;&#125;</span><br><span class="line">&#123;&#123;/full-screen-modal-dialog&#125;&#125;</span><br></pre></td></tr></table></figure><p>But what when we want to redirect the user to the previous view, similarly like when the user clicks on the back button in the browser?</p><p>There is a problem with how to track the history of visited routes. I was researching a long time and found a few solutions:</p><ol><li><p>Use dedicated add-ons:</p><ul><li><code>ember-cli-history-mixin</code></li><li><code>ember-route-history</code></li></ul><p>Disadvantage: Seems to be not maintained and problems with recording the history of nested routes. Generally fetching ids from the router object is hard.</p></li><li><p>Use <code>window.history.back()</code></p></li></ol><p>That looks fine but doesn’t work the same way in all browsers. Also, it would redirect the user outside the app.</p><ol start="3"><li>Some code snippets on Stackoverflow which hacks router to extract previous route state.</li></ol><p>The code seems quite complicated and hacky.</p><p>Finally, I chose a solution on this blog: <a href="http://kiprosh.com/blog/ember-js-how-to-track-last-visited-route" target="_blank" rel="noopener">http://kiprosh.com/blog/ember-js-how-to-track-last-visited-route</a></p><p>Although, it wasn’t perfect, because it still didn’t work with nested routes.</p><p>On the occasion, I approached it with TDD believing that I will discover something new.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">'click on close redirects back to the previous route from nested routes'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">assert</span>) </span>&#123;</span><br><span class="line">  server.createList(<span class="string">'note'</span>, <span class="number">1</span>);</span><br><span class="line">  server.createList(<span class="string">'comment'</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  visit(<span class="string">'/note/1/comment/1'</span>);</span><br><span class="line"></span><br><span class="line">  andThen(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    assert.equal(currentURL(), <span class="string">'/note/1/comment/1'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  click(<span class="string">'a#search'</span>);</span><br><span class="line"></span><br><span class="line">  andThen(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    assert.equal(currentURL(), <span class="string">'/search'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  click(<span class="string">'a.search-close'</span>);</span><br><span class="line"></span><br><span class="line">  andThen(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    assert.equal(currentURL(), <span class="string">'/note/1/comment/1'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>…and started debugging and looking at router object, to retrieve some info current route path.</p><p>Happily, I found something new - <code>router.location.path</code> which stores the string. I was surprised. It looks like something new in Ember and doesn’t need to hack it to make a transition back.</p><p>So updated recording last visited route in beforeModel hook:</p><p><code>routes/search.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">'ember'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">  beforeModel() &#123;</span><br><span class="line">    <span class="keyword">let</span> previousRoutes = <span class="keyword">this</span>.router.router.currentHandlerInfos;</span><br><span class="line">    <span class="keyword">let</span> previousRoute = previousRoutes &amp;&amp; previousRoutes.pop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (previousRoute &amp;&amp; previousRoute.name !== <span class="string">'search'</span>) &#123;</span><br><span class="line">      localStorage[<span class="string">'lastVisitedRoute'</span>] = previousRoute.name;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// use location path to store last visited route</span></span><br><span class="line">      localStorage[<span class="string">'lastVisitedRoutePath'</span>] = <span class="keyword">this</span>.router.location.path;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>routes/search.hbs</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;#full-screen-modal-dialog&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">'search-close'</span> &#123;&#123;<span class="attr">action</span> "<span class="attr">close</span>"&#125;&#125;&gt;</span>Close<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;&#123;/full-screen-modal-dialog&#125;&#125;</span><br></pre></td></tr></table></figure><p><code>controllers/search.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">'ember'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">  actions: &#123;</span><br><span class="line">    close() &#123;</span><br><span class="line">      <span class="keyword">let</span> lastVisitedRoute = localStorage[<span class="string">'lastVisitedRoutePath'</span>] || <span class="string">"index"</span>;</span><br><span class="line">      <span class="keyword">this</span>.transitionToRoute(lastVisitedRoutePath);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>I was happy that I finally found a solution to the problem I was struggling for a long time. However I discovered something unexpected when I tested the app manually!! That didn’t work. Again using debugger I investigated that path is undefined and the router has a problem with transition. Say what!? The tests are green.</p><h2 id="Ember-Location-API"><a href="#Ember-Location-API" class="headerlink" title="Ember.Location API"></a>Ember.Location API</h2><p>I learned that Ember uses different strategies for routing location in test and development mode by default. You can see it when you look at <code>config/environment.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">environment</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ENV = &#123;</span><br><span class="line">    <span class="comment">// (...)</span></span><br><span class="line">    locationType: <span class="string">'auto'</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// (...)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (environment === <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="comment">// Testem prefers this...</span></span><br><span class="line">    ENV.locationType = <span class="string">'none'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// (...)</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Started digging in the docs (<a href="https://www.emberjs.com/api/ember/2.14.1/namespaces/Ember.Location" target="_blank" rel="noopener">https://www.emberjs.com/api/ember/2.14.1/namespaces/Ember.Location</a>) and source code to find more.</p><p>Generally, 4 types of location can be used by Ember:</p><h3 id="Ember-NoneLocation"><a href="#Ember-NoneLocation" class="headerlink" title="Ember.NoneLocation"></a>Ember.NoneLocation</h3><p>It’s used in tests. That makes sense because when test is running there is URL like:<br>I switched to this type in the development and then <code>router.location.path</code> was again accessible and redirection worked as expected. But URL was blank all the time, so I had to give up this solution.</p><p>That type could be also usable when you embed your Ember application on a larger page.</p><h3 id="Ember-HashLocation"><a href="#Ember-HashLocation" class="headerlink" title="Ember.HashLocation"></a>Ember.HashLocation</h3><p>This is the default. The characteristic thing is that it adds # on the beginning of the path in the URL.<br>I noticed that in the code introduced <code>router.location.lastSetPath</code> which sounds familiar and contains the same string with a full path like <code>router.location.path</code> in Ember.NoneLocation.</p><p>Note: the value is set only when a transition is performed by a router. In other words it won’t work on copy-paste an URL and hit Enter.</p><h3 id="Ember-HistoryLocation"><a href="#Ember-HistoryLocation" class="headerlink" title="Ember.HistoryLocation"></a>Ember.HistoryLocation</h3><p>Using HistoryLocation results in URLs that are indistinguishable from a standard URL. This relies upon the browser’s history API.</p><h3 id="Ember-AutoLocation"><a href="#Ember-AutoLocation" class="headerlink" title="Ember.AutoLocation"></a>Ember.AutoLocation</h3><p>Using AutoLocation, the router will use the best Location class supported by the browser it is running in.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>I resolved this problem by removing acceptance tests temporarily and in development / production - use hash location combined with storing last visited route like here:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage[<span class="string">'lastVisitedRoutePath'</span>] = <span class="keyword">this</span>.router.location.lastSetPath;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Motivation&quot;&gt;&lt;a href=&quot;#Motivation&quot; class=&quot;headerlink&quot; title=&quot;Motivation&quot;&gt;&lt;/a&gt;Motivation&lt;/h2&gt;&lt;p&gt;In the approach with routable modal de</summary>
      
    
    
    
    
    <category term="ember" scheme="http://rafaltrojanowski.github.io/tags/ember/"/>
    
    <category term="single-page-application" scheme="http://rafaltrojanowski.github.io/tags/single-page-application/"/>
    
  </entry>
  
  <entry>
    <title>Desing Fullscreen Search Interface With Ember - Part 3</title>
    <link href="http://rafaltrojanowski.github.io/2017/07/19/desing-fullscreen-search-interface-part-3/"/>
    <id>http://rafaltrojanowski.github.io/2017/07/19/desing-fullscreen-search-interface-part-3/</id>
    <published>2017-07-19T09:10:44.000Z</published>
    <updated>2021-06-24T08:06:26.081Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I was using tripadvisor.com and I noticed that this application also uses fullscreen modals dialogs for displaying data dynamically. What’s was interesting, I discovered a different approach to make rendering modal effect smooth.</p><p>There is a kind of sub-screen with a fullscreen loader. I have fallen in love with that experience so I will reimplement it with Ember…</p><p>UPDATE: Please check this approach, seems that’s the new Ember way how to deal with it and deliver great UX: <a href="https://emberway.io/skeleton-screen-loading-in-ember-js-2f7ac2384d63" target="_blank" rel="noopener">https://emberway.io/skeleton-screen-loading-in-ember-js-2f7ac2384d63</a></p><p>Anyway, in part 2 we finished with kind of loader placed within fullscreen modal content. It was just raw text, but the thing is that we can use fullscreen loader as Tripadvisor does!</p><p><img src="/images/search-part-3.gif" alt=""></p><p>That’s easy thanks to the routable approach we choose and ember built-in loading substates.<br>Router code is extremely simple now:</p><p><code>/app/routes/search.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">'ember'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">  queryParams: &#123;</span><br><span class="line">    query: &#123;</span><br><span class="line">      refreshModel: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  model(params) &#123;</span><br><span class="line">    <span class="keyword">let</span> q = params.query;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (q) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.store.query(<span class="string">'note'</span>, &#123; <span class="attr">title</span>: q &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.store.findAll(<span class="string">'note'</span>, &#123; <span class="attr">reload</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Time for styling to make loader beautiful.</p><p><code>app/styles/app.scss</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.loading</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loader</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">4em</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: .<span class="number">8em</span> solid <span class="built_in">rgba</span>(<span class="number">218</span>, <span class="number">219</span>, <span class="number">223</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">border-left</span>: .<span class="number">8em</span> solid <span class="built_in">rgba</span>(<span class="number">58</span>, <span class="number">166</span>, <span class="number">165</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">animation</span>: spin <span class="number">1.1s</span> infinite linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loader</span>, <span class="selector-class">.loader</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">8em</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">4.05em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> spin &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And where the magic happens:</p><p><code>app/templates/search-loading.hbs</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;#full-screen-modal-dialog&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loading"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loader"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;&#123;/full-screen-modal-dialog&#125;&#125;</span><br></pre></td></tr></table></figure><p>Yeah, we are reusing here our full-screen-modal-dialog again.</p><p>That’s pretty cool, with just a few lines of code!</p><p>I hope you enjoyed it!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Recently I was using tripadvisor.com and I noticed that this application also uses fullscreen modals dialogs for displaying data dynamica</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Desing Fullscreen Search Interface With Ember - Part 2</title>
    <link href="http://rafaltrojanowski.github.io/2017/07/17/desing-fullscreen-search-interface-part-2/"/>
    <id>http://rafaltrojanowski.github.io/2017/07/17/desing-fullscreen-search-interface-part-2/</id>
    <published>2017-07-17T10:47:17.000Z</published>
    <updated>2021-06-24T08:06:26.080Z</updated>
    
    <content type="html"><![CDATA[<p>In the first part we prepared a routable modal for the search interface.<br>Now it’s time to allow a user to interact with that modal and query backend.</p><h2 id="Add-search-form-component"><a href="#Add-search-form-component" class="headerlink" title="Add search form component"></a>Add search form component</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ember generate component search-form</span><br></pre></td></tr></table></figure><p><code>app/components/search-form.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">'ember'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;&#125;);</span><br></pre></td></tr></table></figure><p><code>app/templates/components/search-form.hbs</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>What are you searching for?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>app/templates/search.hbs</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;#full-screen-modal-dialog&#125;&#125;</span><br><span class="line">  &#123;&#123;search-box&#125;&#125;</span><br><span class="line">&#123;&#123;/full-screen-modal-dialog&#125;&#125;</span><br></pre></td></tr></table></figure><p><code>tests/integration/components/search-box-test.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; test, moduleForComponent &#125; <span class="keyword">from</span> <span class="string">'ember-qunit'</span>;</span><br><span class="line"><span class="keyword">import</span> hbs <span class="keyword">from</span> <span class="string">'htmlbars-inline-precompile'</span>;</span><br><span class="line"></span><br><span class="line">moduleForComponent(<span class="string">'search-box'</span>, <span class="string">'Integration | Component | search box'</span>, &#123;</span><br><span class="line">  integration: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'it renders'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">assert</span>) </span>&#123;</span><br><span class="line">  assert.expect(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.render(hbs <span class="string">`&#123;&#123;search-box&#125;&#125;`</span>);</span><br><span class="line"></span><br><span class="line">  assert.equal(<span class="keyword">this</span>.$(<span class="string">'h1'</span>).text().trim(), <span class="string">'Hello!'</span>);</span><br><span class="line">  assert.equal(<span class="keyword">this</span>.$(<span class="string">'p:first'</span>).text().trim(), <span class="string">"What are you searching for?"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Now it’s time to make this component able to act.<br>We add an acceptance test first as it’s very easy to describe what we want to achieve.</p><p><code>tests/acceptance/search-test.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">'search by query'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">assert</span>) </span>&#123;</span><br><span class="line">  visit(<span class="string">'/search'</span>);</span><br><span class="line"></span><br><span class="line">  fillIn(<span class="string">'input.search-query'</span>, <span class="string">'watermelon'</span>);</span><br><span class="line">  click(<span class="string">'input.submit-button'</span>);</span><br><span class="line"></span><br><span class="line">  andThen(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    assert.equal(currentURL(), <span class="string">'/search?query=watermelon'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>app/components/search-box.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">'ember'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;</span><br><span class="line">  query: <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">  actions: &#123;</span><br><span class="line">    updateParams() &#123;</span><br><span class="line">      <span class="keyword">this</span>.sendAction(<span class="string">'updateParams'</span>) <span class="comment">// or this.attrs.updateParams();</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>app/controllers/search.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">'ember'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Controller.extend(&#123;</span><br><span class="line">  queryParams: [<span class="string">'query'</span>],</span><br><span class="line">  query: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  actions: &#123;</span><br><span class="line">    updateParams() &#123;</span><br><span class="line">      <span class="keyword">this</span>.transitionToRoute(<span class="string">'search'</span>, &#123; <span class="attr">queryParams</span>: &#123; <span class="attr">query</span>: @<span class="keyword">get</span>('query') &#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>And finally:</p><p><code>app/templates/components/search-box.hbs</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>What are you searching for?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-horizontal"</span> &#123;&#123;<span class="attr">action</span> "<span class="attr">updateParams</span>" <span class="attr">on</span>=<span class="string">"submit"</span>&#125;&#125;&gt;</span></span><br><span class="line">  &#123;&#123;input class="search-query" value=query&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"submit-button"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>app/templates/search.hbs</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;#modal-dialog&#125;&#125;</span><br><span class="line">  &#123;&#123;search-box updateParams=(action "updateParams") query=query&#125;&#125;</span><br><span class="line">&#123;&#123;/modal-dialog&#125;&#125;</span><br></pre></td></tr></table></figure><p>On the end action can be tested in component integration test this way:</p><p><code>tests/integration/components/search-box-test.coffee</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">'when clicks on submit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">assert</span>) </span>&#123;</span><br><span class="line">  assert.expect(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.set(<span class="string">'query'</span>, <span class="string">"watermelon"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.set(<span class="string">'updateParams'</span>, () =&gt; &#123;</span><br><span class="line">    assert.ok(<span class="literal">true</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.render(hbs <span class="string">`&#123;&#123;search-box query=query updateParams=(action updateParams)&#125;&#125;`</span>);</span><br><span class="line">  <span class="keyword">this</span>.$(<span class="string">'input.submit-button'</span>).click();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>So now we have a component that can communicate and pass a query to the router. But there is one bummer! When user types, URL changes instantly. We don’t want to send a query to the backend on each key down event though, so let’s fix it:</p><p>Let’s rename the component property, and thanks to this propagate property changes only after submitting our form:</p><p><code>tests/acceptance/search-test.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">'search by query do not modify url without submit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">assert</span>) </span>&#123;</span><br><span class="line">  visit(<span class="string">'/search'</span>);</span><br><span class="line"></span><br><span class="line">  fillIn(<span class="string">'input.search-query'</span>, <span class="string">'wate'</span>);</span><br><span class="line"></span><br><span class="line">  andThen(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    assert.equal(currentURL(), <span class="string">'/search'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>app/components/search-box.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Component.extend(&#123;</span><br><span class="line">  searchQuery: <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">  actions: &#123;</span><br><span class="line">    updateParams() &#123;</span><br><span class="line">      <span class="keyword">this</span>.set(<span class="string">'query'</span>, <span class="keyword">this</span>.get(<span class="string">'searchQuery'</span>)); <span class="comment">// that's the trick!</span></span><br><span class="line">      <span class="keyword">this</span>.sendAction(<span class="string">'updateParams'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>app/templates/components/search-box.hbs</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-horizontal"</span> &#123;&#123;<span class="attr">action</span> "<span class="attr">updateParams</span>" <span class="attr">on</span>=<span class="string">"submit"</span>&#125;&#125;&gt;</span></span><br><span class="line">  &#123;&#123;input class="search-query" value=searchQuery&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"submit-button"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="Add-querying-mechanism"><a href="#Add-querying-mechanism" class="headerlink" title="Add querying mechanism"></a>Add querying mechanism</h2><p>That part is pretty simple, it’s just passing data down to the component from model hook:</p><p><code>app/routes/search.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">'ember'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line">  queryParams: &#123;</span><br><span class="line">    query: &#123;</span><br><span class="line">      refreshModel: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  model(params) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.store.query(<span class="string">'note'</span>, &#123; <span class="attr">title</span>: params.query &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>I will skip the rest of the code, now let’s focus on:</p><h2 id="Mocking-backend"><a href="#Mocking-backend" class="headerlink" title="Mocking backend"></a>Mocking backend</h2><p>I know two reasonable approaches. Okay, technically there are three:</p><ol><li>hard-coded array of JavaScript objects in route`s model hook</li><li>http-mock <a href="https://ember-cli.com/user-guide/#mocks-and-fixtures" target="_blank" rel="noopener">https://ember-cli.com/user-guide/#mocks-and-fixtures</a> (check this out too: <a href="https://www.npmjs.com/package/ember-cli-testem-http-mocks" target="_blank" rel="noopener">https://www.npmjs.com/package/ember-cli-testem-http-mocks</a>)</li><li>using client-side mock server ember-cli-mirage (<a href="http://www.ember-cli-mirage.com/" target="_blank" rel="noopener">http://www.ember-cli-mirage.com/</a>)</li></ol><p>As the last one have a great opinion in the community we will choose it.<br>By the way, it could be used both for development and tests by default, while http-mock requires an additional addon to make it work in the test environment.</p><p>Our updated <code>tests/acceptance/search-test.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">'queries notes by title'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">assert</span>) </span>&#123;</span><br><span class="line">  server.createList(<span class="string">'note'</span>, <span class="number">10</span>) <span class="comment">// create records with mirage</span></span><br><span class="line">  visit(<span class="string">'/search'</span>);</span><br><span class="line"></span><br><span class="line">  fillIn(<span class="string">'input.search-query'</span>, <span class="string">'Note#5'</span>);</span><br><span class="line">  click(<span class="string">'input.submit-button'</span>);</span><br><span class="line"></span><br><span class="line">  andThen(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    assert.equal(find(<span class="string">'ul.notes li'</span>).length, <span class="number">1</span>);</span><br><span class="line">    assert.equal(find(<span class="string">'ul.notes li:first'</span>).text(), <span class="string">"Note#5"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Now time to make the test pass!</p><p>Mirage provides powerful stuff, for example, database methods known from Rails world, for example:<br><code>http://www.ember-cli-mirage.com/docs/v0.3.x/database/#where</code><br>It will be really useful in our search feature!<br>By the way, I just found that it could be used to do super spicy things, check<br><a href="https://github.com/samselikoff/ember-cli-mirage/pull/379" target="_blank" rel="noopener">https://github.com/samselikoff/ember-cli-mirage/pull/379</a> for details.</p><p>Let’s dive into code:</p><p><code>mirage/factories/note.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Factory &#125; <span class="keyword">from</span> <span class="string">'ember-cli-mirage'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Factory.extend(&#123;</span><br><span class="line">  title(i) &#123; <span class="keyword">return</span> <span class="string">'Note#'</span> + i; &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>mirage/config.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.namespace = <span class="string">'/api'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.get(<span class="string">'/notes/'</span>, (schema, request) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(request.queryParams.title === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> schema.notes.all();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> schema.notes.where(&#123;<span class="attr">title</span>: request.queryParams.title&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Improvements"><a href="#Improvements" class="headerlink" title="Improvements"></a>Improvements</h2><h3 id="Speed-up-rendering-the-modal"><a href="#Speed-up-rendering-the-modal" class="headerlink" title="Speed up rendering the modal"></a>Speed up rendering the modal</h3><p>There is also one thing that is not so good. Fetching all data in the model hook blocks the transition. So if there are no Notes in Ember store yet, it could take some time to show a modal filled with data. We want to show a modal smoothly.</p><p>This video (<a href="https://www.youtube.com/watch?v=kPxiiAGMSzE" target="_blank" rel="noopener">https://www.youtube.com/watch?v=kPxiiAGMSzE</a>) from EmberConf 2017 was an inspiration on how to solve this problem elegantly.<br>Check this out:</p><p><code>app/routes/search.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">'ember'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</span><br><span class="line"></span><br><span class="line">  model() &#123;</span><br><span class="line">    Ember.run.schedule(<span class="string">'afterRender'</span>, <span class="keyword">this</span>, <span class="keyword">this</span>._fetchNotes);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  _fetchNotes() &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; controller, store &#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> &#123; query &#125; = controller;</span><br><span class="line"></span><br><span class="line">    controller.set(<span class="string">'isLoading'</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (query) &#123;</span><br><span class="line">      store.query(<span class="string">'note'</span>, &#123; <span class="attr">title</span>: query &#125;)</span><br><span class="line">        .then(<span class="keyword">this</span>._loadNotes.bind(<span class="keyword">this</span>))</span><br><span class="line">        .finally(<span class="keyword">this</span>._done.bind(<span class="keyword">this</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      store.findAll(<span class="string">'note'</span>, &#123; <span class="attr">reload</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">        .then(<span class="keyword">this</span>._loadNotes.bind(<span class="keyword">this</span>))</span><br><span class="line">        .finally(<span class="keyword">this</span>._done.bind(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  _loadNotes(notes) &#123;</span><br><span class="line">    <span class="keyword">this</span>.controller.set(<span class="string">'model'</span>, notes);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  _done() &#123;</span><br><span class="line">    <span class="keyword">this</span>.controller.set(<span class="string">'isLoading'</span>, <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The thing is that we schedule fetching the notes after rendering a template:<br>(BTW loading text could be replaced with any nice spinner instead)</p><p><img src="/images/search-part-2.gif" alt=""></p><p>As you can see even if a long list of notes is fetched, a modal dialog is opened immediately. That was not possible with the previous solution.</p><h3 id="Add-close-button-to-back-to-home-page"><a href="#Add-close-button-to-back-to-home-page" class="headerlink" title="Add close button to back to home page"></a>Add close button to back to home page</h3><p><code>tests/acceptance/search-test.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">'close search modal'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">assert</span>) </span>&#123;</span><br><span class="line">  visit(<span class="string">'/search'</span>);</span><br><span class="line"></span><br><span class="line">  click(<span class="string">'a.search-close'</span>);</span><br><span class="line"></span><br><span class="line">  andThen(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    assert.equal(currentURL(), <span class="string">'/'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>app/templates/search.hbs</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;#full-screen-modal-dialog&#125;&#125;</span><br><span class="line">  &#123;&#123;#link-to "application" class='search-close'&#125;&#125;Close&#123;&#123;/link-to&#125;&#125;</span><br><span class="line">  (...)</span><br><span class="line">&#123;&#123;/full-screen-modal-dialog&#125;&#125;</span><br></pre></td></tr></table></figure><p>Simple, right?</p><p>Thanks for reading!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;In the first part we prepared a routable modal for the search interface.&lt;br&gt;Now it’s time to allow a user to interact with that modal and</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Desing Fullscreen Search Interface With Ember - Part 1</title>
    <link href="http://rafaltrojanowski.github.io/2017/07/17/desing-fullscreen-search-interface/"/>
    <id>http://rafaltrojanowski.github.io/2017/07/17/desing-fullscreen-search-interface/</id>
    <published>2017-07-17T09:04:00.000Z</published>
    <updated>2021-06-24T08:06:26.081Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><p>Some time ago I had been working on a search feature. The UI was designed on a fullscreen page.<br>As hiding navbar and footer or providing separate layout was tricky and not intuitive I decided to use fullscreen modal dialog.</p><p>Generally, modal dialogs have become a ubiquitous feature of mobile web design, but designers need to put more thought into when to use them, and when to leave them.<br>You can read more here: <a href="https://uxmag.com/articles/modals-on-mobile-how-to-use-them-wisely" target="_blank" rel="noopener">https://uxmag.com/articles/modals-on-mobile-how-to-use-them-wisely</a></p><p>By the way, you would ask why the designer planned interface as a full-page view?</p><p>From the usability perspective modal rendered in fullscreen have a few advantages:</p><ul><li>it keeps users focus only on a particular task. We don’t want to distract the user with the content “behind” the modal</li><li>it will work on mobile devices as modal size will adapt to every screen size</li><li>there are opinions that fullscreen modals look better and cleaner</li></ul><p>Summing up requirements are as following:</p><ul><li>Implement modal dialog responsible for data searching;</li><li>Render modal dialog in fullscreen;</li><li>Modal dialog should be accessible from everywhere in the application;</li><li>It should be possible to close search modal dialog and bring back the user to the home view.</li></ul><p>We need to keep in mind a few things:</p><ul><li>Users will hit the back button in the browser when modal is opened;</li><li>Process of loading data asynchronously should be done in “background”, we want to show render modal smoothly</li><li>URL should store the state. Thanks to this, it will work nicely with the user refreshes the page.</li><li>We want to stick to Ember convention (route based model fetching) to prevent problems in future ***</li></ul><p>*** New stuff, must check it out:</p><center>  <blockquote class="twitter-tweet" data-lang="pl"><p lang="en" dir="ltr">This is another great use of ember-concurrency and ember-parachute also seems something I should try <a href="https://t.co/XGuluIJkbo" target="_blank" rel="noopener">https://t.co/XGuluIJkbo</a></p>&mdash; Balint Erdi (@baaz) <a href="https://twitter.com/baaz/status/920963176988110848?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">19 października 2017</a></blockquote>  <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></center><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>Enough talking, based on what has been said let’s allow tests drive us:</p><p><code>tests/acceptance/search-test.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; test &#125; <span class="keyword">from</span> <span class="string">'qunit'</span>;</span><br><span class="line"><span class="keyword">import</span> moduleForAcceptance <span class="keyword">from</span> <span class="string">'notes/tests/helpers/module-for-acceptance'</span>;</span><br><span class="line"></span><br><span class="line">moduleForAcceptance(<span class="string">'Acceptance | Search'</span>);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'layout contains link to search'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">assert</span>) </span>&#123;</span><br><span class="line">  visit(<span class="string">'/'</span>);</span><br><span class="line"></span><br><span class="line">  andThen(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    assert.equal(currentURL(), <span class="string">'/'</span>);</span><br><span class="line">    assert.equal(find(<span class="string">'.navigation a#search'</span>).text(), <span class="string">'Search'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">test(<span class="string">'click on search link redirect to search page'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">assert</span>) </span>&#123;</span><br><span class="line">  visit(<span class="string">'/'</span>);</span><br><span class="line">  click(<span class="string">'.navigation a#search'</span>);</span><br><span class="line"></span><br><span class="line">  andThen(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    assert.equal(currentURL(), <span class="string">'/search'</span>);</span><br><span class="line">    assert.equal(find(<span class="string">'h1'</span>).text(), <span class="string">'Search Page'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>So let’s make it green:</p><p><code>app/templates/application.hbs</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navigation"</span>&gt;</span></span><br><span class="line">  &#123;&#123;#link-to "search" id="search"&#125;&#125;Search&#123;&#123;/link-to&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-content"</span>&gt;</span></span><br><span class="line">  &#123;&#123;outlet&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>app/templates/search.hbs</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Search Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>It works, but it’s just a simple page.<br>There is a great addon for modals dialogs, it also allows us to use a routable approach! Excellent!<br>So let’s add it to our <code>package.json</code> by running:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ember install ember-modal-dialog</span><br></pre></td></tr></table></figure><p><code>app/styles/app.scss</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"ember-modal-dialog/ember-modal-structure"</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"ember-modal-dialog/ember-modal-appearance"</span>;</span><br></pre></td></tr></table></figure><p><code>app/templates/search.hbs</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;#modal-dialog&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Fullscreen Search Page<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">&#123;&#123;/modal-dialog&#125;&#125;</span><br></pre></td></tr></table></figure><p>Now, let’s modify our test a little:</p><p><code>tests/acceptance/search-test.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">test(<span class="string">'click on search link opens modal dialog'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">assert</span>) </span>&#123;</span><br><span class="line">  visit(<span class="string">'/'</span>);</span><br><span class="line">  click(<span class="string">'.navigation a#search'</span>);</span><br><span class="line"></span><br><span class="line">  andThen(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      assert.equal(currentURL(), <span class="string">'/search'</span>);</span><br><span class="line">      assert.equal(find(<span class="string">'.ember-modal-dialog h2'</span>).text(), <span class="string">'Fullscreen Search Page'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>It’s much better, we have the king of the routable modal.<br>However, this needs to be done to display it in fullscreen:</p><p><code>app/components/full-screen-modal-dialog.coffee</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ModalDialog <span class="keyword">from</span> <span class="string">'ember-modal-dialog/components/modal-dialog.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ModalDialog.extend(</span><br><span class="line">  containerClassNames: <span class="string">"full-screen-modal"</span>,</span><br><span class="line">  targetAttachment: <span class="string">"none"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>app/styles/app.scss</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.full-screen-modal</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And finally, in our template we do small change:</p><p><code>app/templates/search.hbs</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;#full-screen-modal-dialog&#125;&#125;</span><br><span class="line">  Fullscreen Screen Page </span><br><span class="line">&#123;&#123;/full-screen-modal-dialog&#125;&#125;</span><br></pre></td></tr></table></figure><p>Let’s say, now we have fullscreen modal and some acceptance tests, which we can simply run in a browser by:</p><p><code>$ ember test --server --filter=&quot;search&quot;</code></p><ul><li>where <code>search</code> needs to be the module name or test name.</li></ul><p>That’s the first step. In the next post we will focus on extending functionality by building search form and list items using Ember components. We will provide some virtual backend to make it behaves like a real app.</p><p>Stay tuned!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Motivation&quot;&gt;&lt;a href=&quot;#Motivation&quot; class=&quot;headerlink&quot; title=&quot;Motivation&quot;&gt;&lt;/a&gt;Motivation&lt;/h3&gt;&lt;p&gt;Some time ago I had been working on a </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Project Specific Git Author</title>
    <link href="http://rafaltrojanowski.github.io/2017/07/16/project-git-author/"/>
    <id>http://rafaltrojanowski.github.io/2017/07/16/project-git-author/</id>
    <published>2017-07-16T15:45:52.000Z</published>
    <updated>2021-06-24T08:06:26.104Z</updated>
    
    <content type="html"><![CDATA[<p>Have you ever wondered how to manage two or more Github accounts on your machine?</p><p>If so, that must be something for you.</p><h3 id="Project-specific-git-author"><a href="#Project-specific-git-author" class="headerlink" title="Project specific git author"></a>Project specific git author</h3><p>Let’s assume we want to manage James Bond’s accounts with following emails:</p><ul><li><a href="mailto:james@home.dev">james@home.dev</a></li><li><a href="mailto:james@work.dev">james@work.dev</a></li></ul><p>We can configure an alias for second account by running:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.workprofile &#39;config user.email &quot;james@work.dev&quot;&#39;</span><br></pre></td></tr></table></figure><p>Behind the scene, it adds additional alias in <code>~/.gitconfig</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[alias]</span><br><span class="line">  workprofile &#x3D; config user.email \&quot;james@work.dev\&quot;\n</span><br></pre></td></tr></table></figure><p>After cloning repo, first thing we have to remember to do is running:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git workprofile</span><br></pre></td></tr></table></figure><p>It simply configures the project to use workprofile’s email, by writing into <code>.git/config</code> in the repository following setting:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">  email &#x3D; james@work.dev</span><br></pre></td></tr></table></figure><p>Now Git sets the author of new commits accordingly. Cool!</p><h3 id="Change-author-in-commits-history"><a href="#Change-author-in-commits-history" class="headerlink" title="Change author in commits history"></a>Change author in commits history</h3><p>Supposing that we have project with commits already messed up regarding author, happily they can be filtered and author can be changed, using following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git filter-branch --commit-filter &#39;if [ &quot;$GIT_AUTHOR_NAME&quot; &#x3D; &quot;James Bond&quot; ]; then export GIT_AUTHOR_NAME&#x3D;&quot;James Bond&quot;; export GIT_AUTHOR_EMAIL&#x3D;james@work.dev; fi; git commit-tree &quot;$@&quot;&#39;</span><br></pre></td></tr></table></figure><p>Then we have to push changes with force option:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -f origin branch_name</span><br></pre></td></tr></table></figure><p>Unfortunetelly, that’s not all. If we are using Github, we will most likely see something annoying. Commits would be marked with two avatars, and we would see something like “user a” committed with “user b”.<br>So, we should also take care of setting committer name similarly as we did before.</p><p>That could be achieved by:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git filter-branch --commit-filter &#39;if [ &quot;$GIT_COMMITTER_NAME&quot; &#x3D; &quot;James Bond&quot; ]; then export GIT_COMMITTER_NAME&#x3D;&quot;James Bond&quot;; export GIT_COMMITTER_EMAIL&#x3D;james@work.dev; fi; git commit-tree &quot;$@&quot;&#39;</span><br></pre></td></tr></table></figure><p>These commands are quite difficult to remember though, so I would suggest to put them into your <code>~/.aliases</code>:</p><p>For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias authorwork&#x3D;&#39;git filter-branch --commit-filter &#39;&quot;&#39;&quot;&#39;if [ &quot;$GIT_AUTHOR_NAME&quot; &#x3D; &quot;James Bond&quot; ]; then export GIT_AUTHOR_NAME&#x3D;&quot;James Bond&quot;; export GIT_AUTHOR_EMAIL&#x3D;james@work.dev; fi; git commit-tree &quot;$@&quot;&#39;&quot;&#39;&quot;&#39;&#39;</span><br></pre></td></tr></table></figure><ul><li>Here small trick will be necessary to make it work - we need to wrap ‘ character into ‘“ “‘.</li></ul><p>That’s all!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Have you ever wondered how to manage two or more Github accounts on your machine?&lt;/p&gt;
&lt;p&gt;If so, that must be something for you.&lt;/p&gt;
&lt;h3 i</summary>
      
    
    
    
    
    <category term="git" scheme="http://rafaltrojanowski.github.io/tags/git/"/>
    
    <category term="tricks" scheme="http://rafaltrojanowski.github.io/tags/tricks/"/>
    
  </entry>
  
</feed>
